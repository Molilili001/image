// --- 用于加载插图索引并定时检查更新的脚本 ---

// 1. 配置
const illustrationIndexUrl = 'https://raw.githubusercontent.com/Molilili001/image/refs/heads/main/%E6%8F%92%E5%9B%BE%E5%88%97%E8%A1%A8';
const updateInterval = 60 * 60 * 1000; // 每小时检查一次 (毫秒)

// 2. 核心功能：检查并更新插图索引
async function checkAndUpdateIllustrations(isInitialLoad = false) {
    if (isInitialLoad) {
        toastr.info('首次加载插图索引...');
    }

    try {
        // 获取远程索引
        const response = await fetch(illustrationIndexUrl);
        if (!response.ok) {
            throw new Error(`网络请求失败，状态码: ${response.status}`);
        }
        const remoteData = await response.json();

        // 获取本地存储的索引
        const localVariables = TavernHelper.getVariables({ type: 'chat' });
        const localData = localVariables.illustration_index;

        // 比较索引是否有变化 (使用 JSON.stringify 是一个简单可靠的对象/数组比较方法)
        if (!localData || JSON.stringify(remoteData) !== JSON.stringify(localData)) {
            // 如果有变化或本地数据不存在，则更新变量
            await TavernHelper.insertOrAssignVariables({
                illustration_index: remoteData
            }, { type: 'chat' });

            // 根据是否是首次加载，显示不同的成功消息
            if (isInitialLoad) {
                toastr.success('插图索引已成功加载！');
            } else {
                toastr.success('检测到更新，插图索引已自动刷新！');
            }
        }
        // 如果没有变化，则什么也不做，保持静默

    } catch (error) {
        // 任何时候出错都进行提示
        console.error('检查或更新插图索引时出错:', error);
        toastr.error(`检查更新失败: ${error.message}`);
    }
}

// 3. 脚本启动逻辑
// 立即执行一次，进行首次加载
checkAndUpdateIllustrations(true);

// 设置定时器，每小时检查一次更新
setInterval(() => checkAndUpdateIllustrations(false), updateInterval);

console.log('插图索引自动更新脚本已启动，将每小时检查一次更新。');